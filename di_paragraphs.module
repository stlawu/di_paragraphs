<?php

/**
 * @file
 * Contains di_paragraphs.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function di_paragraphs_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the di_paragraphs module.
    case 'help.page.di_paragraphs':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Paragraphs and shared fields') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function di_paragraphs_theme($existing, $type, $theme, $path) {
  return [
    'field__entity_reference_revisions' => [
      'base hook' => 'paragraph',
    ],
    // 'field__paragraph__field_media__media' => [
    //   'base hook' => 'paragraph',
    // ],
    'paragraph__grid_column' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__grid_row' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__heading' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__media' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__section' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__text' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__view' => [
      'base hook' => 'paragraph',
    ],
  ];
}

/**
 * Implements hook_preprocess_paragraph__hook().
 */
function di_paragraphs_preprocess_paragraph__media(&$variables) {
  $p = $variables['paragraph'];

  // Setup align variable for template
  if (!$p->field_media_align->isEmpty()) {
    $align = $p->field_media_align->get(0)->value;
    $variables['align'] = 'align-' . $align;
  }

  if ($p && $p->field_media) {
    $media = $p->field_media->entity;
    // Check for media entity and byline_freeform
    if ($media && $media->hasField('field_media_byline_freeform')) {
      // Setup has_byline_freeform boolean variable.
      $has_byline_freeform = $media->field_media_byline_freeform->value;
      $variables['has_byline_freeform'] = !empty($has_byline_freeform);
      // Render the media entity's field_media_byline_freeform on media paragraph type.
      $byline_freeform = $media->field_media_byline_freeform->view(['label' => 'hidden']);
      $variables['byline_freeform'] = $byline_freeform;
    }
    // Check for media entity and transcript
    if ($media && $media->hasField('field_media_transcript')) {
      // Setup has_transcript boolean variable.
      $has_transcript = $media->field_media_transcript->value;
      $variables['has_transcript'] = !empty($has_transcript);
      // Render the media entity's field_media_transcript on media paragraph type.
      $transcript = $media->field_media_transcript->view(['label' => 'hidden']);
      $variables['transcript'] = $transcript;
    }
  }
}

/**
 * Implements hook_preprocess_paragraph__hook().
 */
function di_paragraphs_preprocess_paragraph__section(&$variables) {
  $p = $variables['paragraph'];

  // Setup palette color class name variable.
  $palette = $p->field_section_palette_list->getValue();
  $palettename = !empty($palette[0]['value']) ? $palette[0]['value'] : 'none';
  $variables['palette'] = 'bg-' . $palettename;

  // Setup width variable for template
  if (!$p->field_section_width->isEmpty()) {
    switch ($p->field_section_width->get(0)->value) {
      case "1":
        $width = "section-content-width";
        break;

      case "2":
        $width = "section-full-width";
        break;
    }
    $variables['width'] = $width;
  }
}
